#
# 优化版本的 GitHub Actions OpenWRT 编译脚本
# 基于原版本增加了编译效率优化
#

name: (Claude Opt) Build OpenWrt

on:
  repository_dispatch:
  schedule:
    - cron: 0 23 * * 1
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      build_type:
        description: 'Build type (full/incremental)'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - incremental

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  CACHE_TOOLCHAIN: true
  # 新增优化相关环境变量
  ENABLE_CCACHE: true
  CCACHE_SIZE: 15G
  ENABLE_TMPFS: true
  TMPFS_SIZE: 8G
  PARALLEL_JOBS: auto
  USE_CHINA_MIRROR: false
  TZ: Asia/Singapore

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Check Server Performance
      run: |
        echo "🚀 服务器性能检测"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
        
        # 动态计算最优编译线程数
        CPU_CORES=$(nproc)
        MEMORY_GB=$(free -g | awk 'NR==2{print $2}')
        if [ $MEMORY_GB -ge 14 ]; then
          OPTIMAL_JOBS=$((CPU_CORES + 1))
        elif [ $MEMORY_GB -ge 7 ]; then
          OPTIMAL_JOBS=$CPU_CORES
        else
          OPTIMAL_JOBS=$((CPU_CORES - 1))
        fi
        echo "推荐编译线程数: $OPTIMAL_JOBS"
        echo "OPTIMAL_JOBS=$OPTIMAL_JOBS" >> $GITHUB_ENV

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "🔧 初始化编译环境..."
        docker rmi $(docker images -q) 2>/dev/null || true
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        
        # 配置APT源为中国镜像（加速软件包安装）
        if [ "$USE_CHINA_MIRROR" = "true" ]; then
          sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
          sudo sed -i 's/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list
          sudo sed -i 's/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list
        fi
        
        sudo -E apt-get -y update
        # 安装编译依赖和优化工具
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E apt-get -y install ccache icecc pigz pbzip2 aria2
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"
        
        # 系统优化配置
        echo 'vm.swappiness=1' | sudo tee -a /etc/sysctl.conf
        echo 'vm.vfs_cache_pressure=50' | sudo tee -a /etc/sysctl.conf
        echo 'fs.file-max = 2097152' | sudo tee -a /etc/sysctl.conf
        sudo sysctl -p
    
    - name: Combine Disks
      uses: easimon/maximize-build-space@master
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Setup Compilation Optimization
      run: |
        echo "⚡ 配置编译优化..."
        
        # 配置ccache
         if [ "$ENABLE_CCACHE" = "true" ]; then
           export CCACHE_DIR="$HOME/.ccache"
           mkdir -p "$CCACHE_DIR"
           echo "max_size = $CCACHE_SIZE" > "$CCACHE_DIR/ccache.conf"
           echo "compression = true" >> "$CCACHE_DIR/ccache.conf"
           echo "compress_level = 6" >> "$CCACHE_DIR/ccache.conf"
           echo "hash_dir = false" >> "$CCACHE_DIR/ccache.conf"
           export PATH="/usr/lib/ccache:$PATH"
           ccache -M $CCACHE_SIZE
           ccache -s
           echo "CCACHE_DIR=$CCACHE_DIR" >> $GITHUB_ENV
           echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
           
           # 🆕 新增：同步到 OpenWrt 配置
           if [ -f "openwrt/.config" ]; then
             echo "🔄 同步 CCACHE 配置..."
             cd openwrt
             sed -i "s|CONFIG_CCACHE_DIR=.*|CONFIG_CCACHE_DIR=\"$CCACHE_DIR\"|" .config
             # 如果没有找到该行，则添加
             grep -q "CONFIG_CCACHE_DIR" .config || echo "CONFIG_CCACHE_DIR=\"$CCACHE_DIR\"" >> .config
             echo "✅ CCACHE 路径已同步: $CCACHE_DIR"
             cd ..
           fi
         fi
        
        # 配置tmpfs加速编译
        if [ "$ENABLE_TMPFS" = "true" ]; then
          sudo mkdir -p /mnt/openwrt-tmp
          sudo mount -t tmpfs -o size=$TMPFS_SIZE tmpfs /mnt/openwrt-tmp
          sudo chown runner:runner /mnt/openwrt-tmp
          echo "TMPFS_PATH=/mnt/openwrt-tmp" >> $GITHUB_ENV
        fi
        
        # 设置编译线程数
        if [ "$PARALLEL_JOBS" = "auto" ]; then
          echo "MAKE_JOBS=$OPTIMAL_JOBS" >> $GITHUB_ENV
        else
          echo "MAKE_JOBS=$PARALLEL_JOBS" >> $GITHUB_ENV
        fi

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone source code
      run: |
        echo "📥 克隆源码..."
        df -hT $PWD
        
        # 使用更快的克隆方式
        if [ "$USE_CHINA_MIRROR" = "true" ]; then
          # 尝试使用国内镜像
          git clone https://gitee.com/coolsnowwolf/lede.git openwrt 2>/dev/null || \
          git clone $REPO_URL -b $REPO_BRANCH openwrt --depth=1
        else
          git clone $REPO_URL -b $REPO_BRANCH openwrt --depth=1
        fi
        
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        
        # 如果使用tmpfs，创建符号链接
        if [ -n "$TMPFS_PATH" ]; then
          mkdir -p $TMPFS_PATH/openwrt-build
          ln -sf $TMPFS_PATH/openwrt-build ./build_dir
        fi
    
    - name: Generate Variables
      run: |
        echo "🔍 生成构建变量..."
        cp $CONFIG_FILE $OPENWRT_PATH/.config
        cd $OPENWRT_PATH
        make defconfig > /dev/null 2>&1
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        COMMIT_AUTHOR=$(git show -s --date=short --format="作者: %an")
        echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
        COMMIT_DATE=$(git show -s --date=short --format="时间: %ci")
        echo "COMMIT_DATE=$COMMIT_DATE" >> $GITHUB_ENV
        COMMIT_MESSAGE=$(git show -s --date=short --format="内容: %s")
        echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
        COMMIT_HASH=$(git show -s --date=short --format="hash: %H")
        echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

    - name: Cache Toolchain
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: ${{ env.ENABLE_CCACHE }}
        mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ env.OPENWRT_PATH }}

    # - name: Cache ccache
    #   if: env.ENABLE_CCACHE == 'true'
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.ccache
    #     key: ccache-${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-${{ github.sha }}
    #     restore-keys: |
    #       ccache-${{ env.SOURCE_REPO }}-${{ env.DEVICE_TARGET }}-
    #       ccache-${{ env.SOURCE_REPO }}-
      
    - name: Load custom feeds
      run: |
        echo "📋 加载自定义feeds..."
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        
        # 如果启用中国镜像，替换feeds源
        if [ "$USE_CHINA_MIRROR" = "true" ]; then
          cd openwrt
          cp feeds.conf.default feeds.conf.default.bak
          sed -i 's|https://git.openwrt.org|https://mirrors.tuna.tsinghua.edu.cn/openwrt|g' feeds.conf.default
          sed -i 's|https://github.com/openwrt|https://mirrors.tuna.tsinghua.edu.cn/openwrt|g' feeds.conf.default
          cd ..
        fi
        
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: |
        echo "🔄 更新feeds..."
        cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: |
        echo "📦 安装feeds..."
        cd openwrt && ./scripts/feeds install -a
    # echo "安装ddns-go..."
    # git clone https://github.com/sirpdboy/luci-app-ddns-go.git package/ddns-go &
    # DDNS_PID=$!
                  
    - name: Install additional packages
      run: |
        echo "🔌 安装额外软件包..."
        cd openwrt

        # 并行安装多个包
        {

          echo "安装argon主题..."
          cd package/lean
          rm -rf luci-theme-argon
          git clone -b master https://github.com/jerrykuku/luci-theme-argon.git luci-theme-argon &
          ARGON_PID=$!
          
          # 等待所有后台任务完成
          wait $DDNS_PID
          wait $ARGON_PID
          cd ../..
        }

    - name: Load custom configuration
      run: |
        echo "⚙️ 加载自定义配置..."
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
# time make download -j16 V=s
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
        # 显示下载统计
        echo "下载完成，统计信息："
        du -sh dl/
        ls dl/ | wc -l

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    - name: Check space usage
      if: (!cancelled())
      run: |
        echo "💾 检查磁盘使用情况..."
        df -hT
        if [ "$ENABLE_CCACHE" = "true" ]; then
          echo "ccache使用情况:"
          du -sh ~/.ccache/
        fi

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
        compression-level: 6

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        echo "📁 整理固件文件..."
        cd openwrt/bin/targets/*/*
        rm -rf packages
        
        # 压缩固件以节省空间和传输时间
        echo "压缩固件文件..."
        for file in *.bin *.img; do
          if [ -f "$file" ]; then
            pigz -9 "$file" && echo "压缩 $file 完成"
          fi
        done
        
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        
        # 显示固件信息
        echo "固件文件列表:"
        ls -lh

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        compression-level: 9

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        name: XiaoMi AX3000T ${{ steps.tag.outputs.release_tag }}
        tag: ${{ steps.tag.outputs.release_tag }}
        artifacts: ${{ env.FIRMWARE }}/*
        body: |
          **This is OpenWrt Firmware for XiaoMi AX3000T (Optimized Build)**
          ### 📒 固件信息
          - 💻 平台架构: mediatek-filogic
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: 192.168.11.1
          - 🔑 默认密码: password
          ### ⚡ 编译优化
          - 🔧 ccache加速: ${{ env.ENABLE_CCACHE }}
          - 🚀 tmpfs加速: ${{ env.ENABLE_TMPFS }}
          - 🧵 编译线程: ${{ env.MAKE_JOBS }}
          - 🌏 中国镜像: ${{ env.USE_CHINA_MIRROR }}
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 清理临时文件..."
        # 清理tmpfs
        if [ -n "$TMPFS_PATH" ] && mountpoint -q "$TMPFS_PATH"; then
          sudo umount "$TMPFS_PATH" || true
        fi
        # 显示最终ccache统计
        if [ "$ENABLE_CCACHE" = "true" ]; then
          echo "最终ccache统计:"
          ccache -s || true
        fi
